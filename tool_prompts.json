{
  "_global_guidance": {
    "description": "Global guidance for all Rundeck MCP tools",
    "prompt": "IMPORTANT: If a tool encounters errors (node not found, project not found, job not found, connection issues, etc.), it's okay to stop and report the error clearly. Do not attempt workarounds or continue with partial information. Fail fast and fail clearly. When nodes are not found or unavailable, stop execution immediately and inform the user."
  },
  "list_servers": {
    "description": "List all configured Rundeck servers",
    "prompt": "Shows all configured Rundeck servers with their URLs and API versions.display as a table. Use this to see which servers are available before specifying a server in other tools."
  },
  "get_projects": {
    "description": "Get all Rundeck projects available in your instance",
    "prompt": "This tool retrieves all projects from your Rundeck server. Use this to discover available projects before working with jobs or executions. Optionally specify a server name to target a specific Rundeck instance."
  },
  "create_project": {
    "description": "Create a new Rundeck project",
    "prompt": "Create a new project in Rundeck with optional configuration. Projects organize jobs, executions, and resources. Automatically sets up default node resources configuration. Provide project name (required), description (optional), and custom configuration properties (optional). Use descriptive names and always specify the target server."
  },
  "get_jobs": {
    "description": "Get jobs from a Rundeck project with optional filtering",
    "prompt": "Retrieve jobs from a specific project with human-readable formatting. Jobs are organized by group with status indicators (✅ enabled, ❌ disabled, ⏰ scheduled, 🔧 manual). Perfect for browsing available jobs."
  },
  "get_job_definition": {
    "description": "Get detailed job definition including options, workflow, and metadata",
    "prompt": "Get comprehensive details about a specific job including its workflow steps, input options, scheduling configuration, and execution settings. Essential for understanding job requirements before execution.if asked to describe the job in detail, also create a flowchart avoiding special characters"
  },
  "run_job": {
    "description": "Execute a Rundeck job with optional parameters",
    "prompt": "**CRITICAL WORKFLOW:**\n1. **ALWAYS get_job_definition FIRST** before executing\n2. Review job options from definition\n3. Present job options to user and request input for EACH option\n4. If option has enforced values (list), ensure selection adheres to those values only\n5. Validate all required options are provided\n6. Execute with validated options\n\n**Option Handling:**\n- Display option name, description, default value, and whether required\n- If enforced values list exists, only allow selection from that list\n- If no enforced values, allow free-form input (respecting data type)\n- Do NOT proceed without user input for all options\n\nExecute job immediately with validated parameters and node filters. Returns execution ID for monitoring."
  },
  "create_job": {
    "description": "Create a new Rundeck job in a project with enhanced features",
    "prompt": "Create jobs following these rules:\n\n**MULTI-STEP JOBS (IMPORTANT):**\n- WHERE POSSIBLE, create multi-step jobs by chaining commands in sequence.commands array\n- Break complex workflows into logical phases: pre-check → execute → validate → cleanup\n- Each step should have a clear description\n- Mix step types: script (complex), exec (simple), plugins (specialized)\n\n**STEP TYPE DECISION (CRITICAL - DEFAULT TO SCRIPT):**\n- ⚠️ **DEFAULT: Use `script:` type for ALL commands and scripting**\n- Use `script:` type as the standard - this is your default choice\n- **ONLY use `exec:` BY EXCEPTION for very short single commands** (ls, echo, df, pwd)\n- If you're unsure which to use → use `script:`\n\n**When you MUST use script: (the default)**\n- ANY bash/PowerShell/Python/Ruby scripting → `script:`\n- Multi-line commands → `script:`\n- Pipes (|), redirects (>, <) → `script:`\n- Command chaining (&&, ||, ;) → `script:`\n- Loops, conditionals, heredocs → `script:`\n- Variable substitution → `script:`\n- Any command with complexity → `script:`\n\n**When you MAY use exec: (rare exceptions only)**\n- Single word commands with simple flags: `ls -la`, `echo hello`, `df -h`, `pwd`\n- Absolutely NO pipes, redirects, or chaining\n- When in doubt → use `script:` instead\n\n**Other step types:**\n- SQL queries → SQL Runner plugin\n- Package/service management → Ansible plugin\n- API calls → HTTP plugin\n\n**SCRIPT SPLITTING (CRITICAL):**\n- Split bash/PowerShell/Python scripts into multi-step jobs where appropriate stages are identified\n- Identify logical stages in scripts and create separate steps for each\n- Look for natural break points: initialization, validation, execution, verification, cleanup\n- If a script has distinct phases marked by comments or echo statements, split into separate steps\n- Each step should have one clear purpose and description\n- Examples of stages to split:\n  - Pre-checks/validation → Main execution → Post-validation → Cleanup\n  - Backup → Deploy → Verify → Rollback handler\n  - Setup environment → Process data → Generate reports → Archive results\n  - Download → Extract → Configure → Start service\n\n**SCRIPT INTERPRETER (CRITICAL):**\n- ALWAYS set `scriptInterpreter` field for script steps\n- Match interpreter to script content:\n  - Bash scripts → `scriptInterpreter: bash`\n  - PowerShell scripts → `scriptInterpreter: powershell`\n  - Python scripts → `scriptInterpreter: python3`\n  - Match shebang: `#!/usr/bin/python3` → `scriptInterpreter: python3`\n\n**VARIABLE RULES (CRITICAL):**\n- Script steps (`script:` field) → `@option.VAR@`\n- Everything else (exec, plugins, jobrefs) → `${option.VAR}`\n- ⚠️ **ALWAYS use `@option.name@` syntax in scripts, NOT shell-style `${option.name}`**\n- ✅ CORRECT: `@option.pd_incident_id@`, `@option.timeout@`, `@option.environment@`\n- ❌ WRONG: `${option.pd_incident_id}`, `$pd_incident_id`, `${PD_INCIDENT_ID}`\n\n**JOB OPTIONS BEST PRACTICES:**\n- Always provide default values for optional parameters\n- Use descriptive option names (snake_case preferred: pd_incident_id, check_timeout, environment)\n- Include clear descriptions for each option\n- Mark required options explicitly with `required: true`\n- For demo/simulation jobs, include options that would be used in production\n\n**JOB METADATA:**\n- Tags should be relevant to the job's purpose (deployment, monitoring, backup, database, etc.)\n- UUIDs are auto-generated - do not provide id or uuid fields\n\n**EXAMPLES:**\n\n❌ WRONG - Multi-line in exec:\n```yaml\n- exec: |\n    echo \"Starting\"\n    cp /src/* /dest/\n```\n\n✅ CORRECT - Multi-line in script:\n```yaml\n- description: Copy files\n  script: |\n    #!/bin/bash\n    echo \"Starting\"\n    cp /src/@option.version@/* /dest/\n```\n\n❌ WRONG - Pipe in exec:\n```yaml\n- exec: ps aux | grep java\n```\n\n✅ CORRECT - Pipe in script:\n```yaml\n- description: Find Java processes\n  script: |\n    #!/bin/bash\n    ps aux | grep @option.process@\n```\n\n✅ ACCEPTABLE - Simple exec:\n```yaml\n- exec: ls -la /tmp\n  description: List temp files\n```\n\n**COMPLETE JOB EXAMPLE:**\n```yaml\nsequence:\n  commands:\n  - description: Check disk space\n    exec: df -h\n  \n  - description: Deploy application\n    script: |\n      #!/bin/bash\n      echo \"Deploying version @option.version@\"\n      cp -r /staging/@option.version@/* /opt/app/\n      chown -R appuser:appgroup /opt/app/\n  \n  - description: Update database schema\n    type: org.rundeck.sqlrunner.SQLRunnerNodeStepPlugin\n    nodeStep: true\n    configuration:\n      jdbcUrl: jdbc:mysql://localhost/${option.database}\n      user: ${option.db_user}\n      password: keys/db_password\n      scriptBody: |\n        UPDATE config SET version='${option.version}' WHERE app='${option.app}';\n        INSERT INTO deploy_log VALUES (NOW(), '${option.version}');\n  \n  - description: Restart service\n    type: com.batix.rundeck.plugins.AnsiblePlaybookInlineWorkflowNodeStep\n    nodeStep: true\n    configuration:\n      ansible-playbook-inline: |\n        - hosts: all\n          tasks:\n          - name: Restart ${option.service}\n            systemd:\n              name: ${option.service}\n              state: restarted\n  \n  - description: Health check\n    script: |\n      #!/bin/bash\n      for i in {1..30}; do\n        if curl -f http://localhost:@option.port@/health; then\n          echo \"Service healthy\"\n          exit 0\n        fi\n        sleep 2\n      done\n      echo \"Health check failed\"\n      exit 1\n```\n\n**SCRIPT STEP TEMPLATE:**\n```yaml\n- description: Always have a name in here\n  script: |\n    #sample script\n    #use options in the format @option.value@\n  scriptInterpreter: bash\n```\n\nSee SAMPLE_JOB.yaml and VARIABLE_RULES.md for complete examples."
  },
  "job_import": {
    "description": "Import jobs from YAML or JSON format with intelligent enhancements",
    "prompt": "Import jobs from YAML or JSON. Generates UUIDs automatically. Validates structure.\n\n**CRITICAL:** Same rules as create_job:\n\n**MULTI-STEP:** Chain commands in sequence.commands array (pre-check → execute → validate)\n\n**STEP TYPE (DEFAULT TO SCRIPT):** \n- ⚠️ **DEFAULT: Use `script:` type - this is your standard choice**\n- **ONLY use `exec:` BY EXCEPTION for very short single commands** (ls, echo, df, pwd)\n- If unsure → use `script:`\n\n**SCRIPT INTERPRETER:** ALWAYS set for script steps (bash, python3, powershell)\n\n**VARIABLES (CRITICAL):** \n- Script steps → `@option.VAR@`, Exec/plugins → `${option.VAR}`\n- ⚠️ **ALWAYS use `@option.name@` in scripts, NOT `${option.name}`**\n- ✅ CORRECT: `@option.pd_incident_id@`\n- ❌ WRONG: `${option.pd_incident_id}`, `$pd_incident_id`\n\n**JOB OPTIONS:** Use snake_case names, provide defaults, clear descriptions, mark required explicitly\n\n**TAGS:** Relevant to job purpose (deployment, monitoring, backup, etc.)\n\n✅ MULTI-STEP EXAMPLE:\n```yaml\nsequence:\n  commands:\n  - description: Pre-check\n    exec: echo \"Starting\"\n  - description: Execute task\n    script: |\n      #!/bin/bash\n      echo \"test\" | tee log.txt\n    scriptInterpreter: bash\n  - description: Validate\n    exec: cat log.txt\n```\n\nValidates all jobs have `name` and `sequence.commands` array. See SAMPLE_JOB.yaml for complete template."
  },
  "modify_job": {
    "description": "Modify an existing Rundeck job by deleting and recreating with same UUID",
    "prompt": "🟡 MEDIUM RISK - JOB MODIFICATION\n\nModifies job by delete/recreate with same UUID. Job temporarily unavailable during modification.\n\n**CRITICAL:** Same rules as create_job:\n\n**MULTI-STEP:** Chain commands in sequence.commands array (pre-check → execute → validate)\n\n**STEP TYPE (DEFAULT TO SCRIPT):** \n- ⚠️ **DEFAULT: Use `script:` type - this is your standard choice**\n- **ONLY use `exec:` BY EXCEPTION for very short single commands** (ls, echo, df, pwd)\n- If unsure → use `script:`\n\n**SCRIPT INTERPRETER:** ALWAYS set for script steps (bash, python3, powershell)\n\n**VARIABLES (CRITICAL):** \n- Script steps → `@option.VAR@`, Exec/plugins → `${option.VAR}`\n- ⚠️ **ALWAYS use `@option.name@` in scripts, NOT `${option.name}`**\n- ✅ CORRECT: `@option.pd_incident_id@`\n- ❌ WRONG: `${option.pd_incident_id}`, `$pd_incident_id`\n\n**JOB OPTIONS:** Use snake_case names, provide defaults, clear descriptions, mark required explicitly\n\n**TAGS:** Relevant to job purpose (deployment, monitoring, backup, etc.)\n\n❌ WRONG: Multi-line or pipes in exec\n✅ CORRECT: Use script with shebang and scriptInterpreter field\n\nRequires `confirmed=True` for safety. See SAMPLE_JOB.yaml for complete template."
  },
  "get_execution_status": {
    "description": "Get the status and details of a job execution",
    "prompt": "Check the current status of a running or completed job execution. Shows execution state, timing, user, and node results. Use the execution ID returned from run_job."
  },
  "get_execution_output": {
    "description": "Get the output logs of a job execution",
    "prompt": "Retrieve the complete output logs from a job execution. Useful for debugging failed jobs or reviewing execution details."
  },
  "get_executions": {
    "description": "Get executions for a project with filtering options and pagination",
    "prompt": "Query execution history with human-readable formatting showing status icons (✅ succeeded, ❌ failed, 🔄 running). Supports pagination and filtering. Returns formatted summaries by default - perfect for browsing recent activity."
  },
  "get_all_executions": {
    "description": "Get all executions with automatic pagination (up to specified limit)",
    "prompt": "Retrieve large datasets with automatic pagination and status summaries. Shows overview statistics and recent executions in human-readable format. Ideal for comprehensive project analysis and reporting."
  },
  "get_execution_metrics": {
    "description": "Get comprehensive execution metrics and analytics for a project",
    "prompt": "Generate detailed analytics including success rates, duration statistics, job frequency analysis, and performance trends over a specified time period. Perfect for project health assessment."
  },
  "get_system_info": {
    "description": "Get Rundeck system information and health metrics",
    "prompt": "Retrieve system-level information about your Rundeck instance including version, health status, and configuration details."
  },
  "get_project_stats": {
    "description": "Get comprehensive statistics for a project including jobs and execution metrics",
    "prompt": "Generate a complete project overview including job counts (total, enabled, scheduled), recent execution metrics, and project configuration. Ideal for project health dashboards."
  },
  "calculate_job_roi": {
    "description": "Calculate ROI metrics for a specific job including cost analysis and value estimation",
    "prompt": "Perform comprehensive ROI analysis for automation jobs including execution costs, estimated manual work savings, and ROI percentage. Helps justify automation investments and identify optimization opportunities."
  },
  "get_bulk_execution_status": {
    "description": "Get status for multiple executions efficiently",
    "prompt": "Check status for multiple executions in a single operation. More efficient than individual status checks when monitoring multiple jobs."
  },
  "run_job_with_monitoring": {
    "description": "Execute a job with optional monitoring until completion",
    "prompt": "**CRITICAL WORKFLOW:**\n1. **ALWAYS get_job_definition FIRST** before executing\n2. Estimate impact from risk/cost perspective\n3. Show risk emoji (🔴 red / 🟡 amber / 🟢 green) and Impact assessment at beginning\n4. Present ALL job options to user\n5. Request input for EACH option\n6. Validate and confirm before execution\n7. Execute and monitor until completion\n\n**Option Display Format:**\nDisplay as numbered list in table format:\n- → Required option (must be provided)\n- ← Optional option (default value in brackets)\n- Show: name, description, default, required/optional status\n\n**Option Validation:**\n- If option has enforced values (predefined list), ONLY allow selection from that list\n- Display available values clearly\n- Reject invalid selections\n- If no enforced values, allow free-form input (respecting data type)\n- Ensure ALL required options have values before proceeding\n\n**Execution Rules:**\n- Do NOT run without confirmation of options or defaults\n- Stop to allow user to enter values in format: number/value\n- Ask for confirmation explaining why if risk detected\n- Always show output in code box\n- Include timeout protection\n- Return final execution status\n\n**Use Case:** Ideal for automated workflows requiring completion confirmation."
  },
  "get_nodes": {
    "description": "Get nodes for a Rundeck project with optional filtering",
    "prompt": "Retrieve and display all nodes (servers/hosts) in a Rundeck project with human-readable formatting. Shows node names, hostnames, operating systems, and tags. Supports filtering by node attributes or tags to find specific nodes. Perfect for infrastructure discovery and node inventory management."
  },
  "get_node_details": {
    "description": "Get detailed information about a specific node",
    "prompt": "Get comprehensive details about a specific node including hostname, operating system details, architecture, version, description, tags, and all custom attributes. Essential for understanding node configuration and capabilities before job execution."
  },
  "get_node_summary": {
    "description": "Get a summary of nodes in the project including counts and statistics",
    "prompt": "Generate a comprehensive overview of all nodes in a project including total counts, operating system distribution, status breakdown, most common tags, and infrastructure statistics. Ideal for infrastructure health assessment and capacity planning."
  },
  "suggest_node_filters": {
    "description": "Suggest node filter patterns for targeting specific nodes",
    "prompt": "ESSENTIAL for Windows node troubleshooting. When adhoc commands fail with 'No nodes matched', use this tool to find the correct filter syntax. Provide a search term (like 'Server-1' or 'windows') to get specific suggestions for that node. Returns exact filter patterns, regex options, and troubleshooting guidance for targeting Windows and other remote nodes."
  },
  "abort_execution": {
    "description": "Abort a running execution",
    "prompt": "ALWAYS show red square emoji and Impact assessment: HIGH RISK at the beginning. Emergency stop for running job executions. Use when jobs are consuming excessive resources, running longer than expected, or need immediate termination. Requires confirmation before proceeding. Shows abort status and provides execution details."
  },
  "retry_execution": {
    "description": "Retry a failed execution",
    "prompt": "Re-execute a failed job with optional parameter overrides. Useful for transient failures, network issues, or when conditions have been corrected. Can modify job options and node filters for the retry. Returns new execution ID for monitoring. Show green square emoji and Impact assessment: LOW RISK."
  },
  "delete_execution": {
    "description": "Delete an execution from the system",
    "prompt": "ALWAYS show amber square emoji and Impact assessment: MEDIUM RISK - DATA LOSS at the beginning. Permanently remove execution records from Rundeck. Use for cleanup, compliance, or removing sensitive execution data. Cannot be undone. Requires confirmation. Ideal for housekeeping and storage management."
  },
  "job_control": {
    "description": "Control job execution and scheduling state",
    "prompt": "🟡 MEDIUM RISK: Consolidated job control operations. Specify operation parameter: 'enable' (activate job execution and scheduling - GREEN SQUARE, LOW RISK), 'disable' (completely disable job - AMBER SQUARE, MEDIUM RISK - SERVICE IMPACT), 'enable_schedule' (enable only scheduling - GREEN SQUARE, LOW RISK), 'disable_schedule' (disable only scheduling, manual execution still works - AMBER SQUARE, LOW-MEDIUM RISK - AUTOMATION IMPACT). Use for maintenance windows, bringing jobs online/offline, or controlling automation vs manual execution. Always show appropriate risk level emoji and impact assessment based on operation type."
  },
  "delete_job": {
    "description": "🔴 PERMANENTLY DELETE a job (DESTRUCTIVE - requires confirmation)",
    "prompt": "🚨 CRITICAL SAFETY PROTOCOL 🚨 ALWAYS show red square emoji and Impact assessment: HIGH RISK - PERMANENT DATA LOSS at the beginning. This tool PERMANENTLY and IRREVERSIBLY deletes a job from Rundeck. The operation cannot be undone and will destroy all job configuration, execution history, and schedules. MANDATORY two-step process: 1) First call WITHOUT confirmed=True to show deletion preview and get explicit user consent, 2) Second call WITH confirmed=True to execute deletion. Always display detailed job information and require explicit user confirmation before proceeding. Use extreme caution - this is a destructive operation."
  },
  "get_execution_mode": {
    "description": "Get current system execution mode",
    "prompt": "Check the global execution mode of the Rundeck system. Shows whether the system is in ACTIVE mode (normal operations) or PASSIVE mode (executions disabled). Essential for understanding system state during maintenance or troubleshooting."
  },
  "set_execution_mode": {
    "description": "Set system execution mode (active or passive)",
    "prompt": "ALWAYS show red square emoji and Impact assessment: HIGH RISK - SYSTEM-WIDE IMPACT at the beginning. Change global system execution mode. ACTIVE enables all job executions, PASSIVE disables all job executions system-wide. Critical for maintenance windows and emergency situations. Requires explicit confirmation. Affects all projects and jobs."
  },
  "analyze_job": {
    "description": "Comprehensive job analysis including purpose, configuration, nodes, and risk assessment",
    "prompt": "Perform deep analysis of a Rundeck job including complete job definition download, purpose inference, node targeting analysis, workflow step breakdown, option requirements, schedule configuration, and comprehensive risk assessment. Shows impact level with colored emoji indicators. Essential for understanding job behavior before execution, security review, and operational planning. Provides both human-readable summary and complete raw JSON data."
  },
  "visualize_job": {
    "description": "Generate a visual flowchart representation of a Rundeck job",
    "prompt": "Create a modern, interactive flowchart visualization of a Rundeck job using Mermaid diagram syntax. Shows the complete execution flow including job configuration, node filters, options, workflow steps, and error handlers. The generated Mermaid code can be rendered in various tools like Mermaid Live Editor, GitHub markdown, VS Code, Confluence, and Jira. Includes color-coded nodes for different step types, emoji indicators for visual clarity, and a comprehensive legend. Perfect for documentation, training, troubleshooting, and understanding complex job workflows at a glance."
  },
  "run_adhoc_command": {
    "description": "Execute ad hoc commands directly on Rundeck nodes",
    "prompt": "ESSENTIAL for Windows node troubleshooting. Execute shell commands directly on nodes without creating permanent job definitions. ALWAYS show amber square emoji and Impact assessment: MEDIUM RISK - DIRECT SYSTEM ACCESS at the beginning. Specify the command to run, target nodes via filter pattern (REQUIRED - no defaults). Examples: 'name: Server-1-infra' for exact node name, 'name: localhost' for local execution, '.*Windows.*' for regex patterns, 'osFamily: windows' for OS filtering. If node filter doesn't match any nodes, STOP IMMEDIATELY and report the error with troubleshooting guidance - do not continue. Use get_nodes or suggest_node_filters tools first to identify correct node names and filter syntax. Returns execution ID and output details. Perfect for Windows diagnostics, quick maintenance tasks, one-off commands, and system troubleshooting. Requires explicit node_filter parameter and confirmation before execution due to direct system access."
  }
}