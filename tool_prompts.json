{
  "_global_guidance": {
    "description": "Global guidance for all Rundeck MCP tools",
    "prompt": "IMPORTANT: If a tool encounters errors (node not found, project not found, job not found, connection issues, etc.), it's okay to stop and report the error clearly. Do not attempt workarounds or continue with partial information. Fail fast and fail clearly. When nodes are not found or unavailable, stop execution immediately and inform the user."
  },
  "list_servers": {
    "description": "List all configured Rundeck servers",
    "prompt": "Shows all configured Rundeck servers with their URLs and API versions.display as a table. Use this to see which servers are available before specifying a server in other tools."
  },
  "get_projects": {
    "description": "Get all Rundeck projects available in your instance",
    "prompt": "This tool retrieves all projects from your Rundeck server. Use this to discover available projects before working with jobs or executions. Optionally specify a server name to target a specific Rundeck instance."
  },
  "create_project": {
    "description": "Create a new Rundeck project",
    "prompt": "Create a new project in Rundeck with optional configuration. Projects organize jobs, executions, and resources. Automatically sets up default node resources configuration. Provide project name (required), description (optional), and custom configuration properties (optional). Use descriptive names and always specify the target server."
  },
  "get_jobs": {
    "description": "Get jobs from a Rundeck project with optional filtering",
    "prompt": "Retrieve jobs from a specific project with human-readable formatting. Jobs are organized by group with status indicators (✅ enabled, ❌ disabled, ⏰ scheduled, 🔧 manual). Perfect for browsing available jobs."
  },
  "get_job_definition": {
    "description": "Get detailed job definition including options, workflow, and metadata",
    "prompt": "Get comprehensive details about a specific job including its workflow steps, input options, scheduling configuration, and execution settings. Essential for understanding job requirements before execution.if asked to describe the job in detail, also create a flowchart avoiding special characters"
  },
  "run_job": {
    "description": "Execute a Rundeck job with optional parameters",
    "prompt": "Execute a job immediately with optional parameters and node filters. Returns execution ID for monitoring. Use get_job_definition first to understand required options."
  },
  "create_job": {
    "description": "Create a new Rundeck job in a project with enhanced features",
    "prompt": "Create a new job with intelligent automation features. Follow these rules: 1) AUTOMATICALLY generate 16-digit alphanumeric UUID for job identification, 2) AUTOMATICALLY break jobs into logical script steps, 3) Document the job description in markdown format with prerequisites section, 4) Extract variables from scripts ($VAR, ${VAR}, VAR=) and create job options with type inference (secure for passwords, select for environments/regions), 5) VARIABLE SUBSTITUTION RULES: ALWAYS use @option.VARIABLENAME@ format for any script type (single @, NOT double @@), 6) If no target machines specified, set job to run locally, 7) Script language: if not specified, attempt bash first, then python, powershell also acceptable, 8) Secure password options MUST have default values - use placeholder defaults like 'changeme' or 'password123'. Always show summary of extracted variables, generated steps, and markdown documentation before creation.\n\n## WORKFLOW STEP TYPES AND EXECUTORS\n\n### Command Steps (exec)\nDirect command execution. For Windows PowerShell, use 'powershell' or 'powershell.exe' as interpreter.\n**Linux/Mac example:**\n```yaml\n- exec: ls -la /var/log\n  description: List log files\n```\n**Windows PowerShell example:**\n```yaml\n- exec: Get-Process | Where-Object {$_.CPU -gt 10}\n  description: Find high CPU processes\n  plugins:\n    LogFilter:\n    - type: 'node-first-summary'\n```\n**Windows with PowerShell interpreter:**\n```yaml\n- exec: Write-Host 'Hello from PowerShell'\n  description: PowerShell command\n  scriptInterpreter: powershell.exe\n```\n\n### Script Steps (script)\nInline scripts with automatic interpreter detection or explicit specification.\n**Bash script (shebang-based):**\n```yaml\n- script: |\n    #!/bin/bash\n    echo \"Starting deployment\"\n    ENVIRONMENT=@option.environment@\n    cd /opt/app && ./deploy.sh $ENVIRONMENT\n  description: Deploy application\n```\n**Python script (shebang-based):**\n```yaml\n- script: |\n    #!/usr/bin/env python3\n    import sys\n    import os\n    env = '@option.environment@'\n    print(f\"Deploying to {env}\")\n  description: Python deployment script\n```\n**PowerShell script (Windows):**\n```yaml\n- script: |\n    $ErrorActionPreference = 'Stop'\n    $ServiceName = '@option.serviceName@'\n    Get-Service -Name $ServiceName | Restart-Service\n    Write-Host \"Service $ServiceName restarted successfully\"\n  description: Restart Windows service\n  scriptInterpreter: powershell.exe -ExecutionPolicy Bypass\n```\n**PowerShell with explicit interpreter:**\n```yaml\n- script: |\n    param([string]$Path)\n    Test-Path $Path\n  description: Check path exists\n  scriptInterpreter: pwsh.exe -NoProfile -Command\n  fileExtension: .ps1\n```\n\n### SQL Steps (sqlRunner plugin)\nDatabase query execution with JDBC connections.\n```yaml\n- type: sqlRunner\n  nodeStep: false\n  configuration:\n    jdbcDriver: 'com.mysql.jdbc.Driver'\n    jdbcUrl: 'jdbc:mysql://localhost:3306/@option.database@'\n    user: '@option.dbUser@'\n    password: '@option.dbPassword@'\n    sql: |\n      SELECT COUNT(*) as total FROM users WHERE created_date > NOW() - INTERVAL 1 DAY;\n      UPDATE metrics SET last_run = NOW() WHERE job_name = 'daily_report';\n  description: Run database maintenance\n```\n\n### Ansible Module Steps (ansible-module plugin)\nSingle Ansible module execution.\n```yaml\n- type: ansible-module\n  nodeStep: true\n  configuration:\n    module: 'apt'\n    args: 'name=nginx state=present'\n    become: 'true'\n    become-user: 'root'\n  description: Install nginx package\n```\n**Windows Ansible module:**\n```yaml\n- type: ansible-module\n  nodeStep: true\n  configuration:\n    module: 'win_service'\n    args: 'name=spooler state=restarted'\n  description: Restart print spooler\n```\n\n### Ansible Playbook Steps (ansible-playbook-inline-workflow-node-step)\nInline Ansible playbook execution.\n```yaml\n- type: ansible-playbook-inline-workflow-node-step\n  nodeStep: true\n  configuration:\n    playbook: |\n      ---\n      - hosts: all\n        become: yes\n        tasks:\n          - name: Install packages\n            apt:\n              name:\n                - git\n                - curl\n                - vim\n              state: present\n              update_cache: yes\n          - name: Create application user\n            user:\n              name: appuser\n              shell: /bin/bash\n              create_home: yes\n  description: Configure application server\n```\n**Windows playbook:**\n```yaml\n- type: ansible-playbook-inline-workflow-node-step\n  nodeStep: true\n  configuration:\n    playbook: |\n      ---\n      - hosts: windows\n        tasks:\n          - name: Install IIS\n            win_feature:\n              name: Web-Server\n              state: present\n          - name: Start IIS service\n            win_service:\n              name: W3SVC\n              state: started\n  description: Install and configure IIS\n```\n\n### Job Reference Steps (jobref)\nCall another job as a step.\n```yaml\n- jobref:\n    name: 'Backup Database'\n    group: 'maintenance'\n    project: '@option.project@'\n    args: '-environment @option.environment@'\n  description: Run backup job\n```\n\n## EXECUTOR SELECTION RULES\n\n1. **Linux/Mac default**: Bash (#!/bin/bash) or Python (#!/usr/bin/env python3)\n2. **Windows PowerShell**: Use `scriptInterpreter: powershell.exe` or `pwsh.exe`\n3. **Windows CMD**: Use `scriptInterpreter: cmd.exe /c`\n4. **Custom interpreters**: Specify full path like `/usr/bin/ruby` or `C:\\\\Python39\\\\python.exe`\n5. **Shebang priority**: If script starts with shebang, it takes precedence over scriptInterpreter\n6. **Ansible**: No interpreter needed - uses Ansible controller configuration\n7. **SQL**: Uses JDBC driver specified in configuration"
  },
  "job_import": {
    "description": "Import jobs from YAML or JSON format with intelligent enhancements",
    "prompt": "Consolidated job import tool supporting both YAML and JSON formats. AUTOMATICALLY generates 16-digit alphanumeric UUIDs for all jobs. Specify format parameter as 'yaml' or 'json'. For JSON: converts to YAML, extracts variables, creates job options with type inference, fixes format issues. For YAML: validates structure and generates UUIDs. VARIABLE SUBSTITUTION RULES: ALWAYS use @option.VARIABLENAME@ format for any script type (single @, NOT double @@). Supports single jobs or multiple jobs in one import. Perfect for migrating job collections or importing complex job definitions. Show import summary with validation results.\n\n## STEP TYPE COMPATIBILITY\n\nWhen importing jobs, ensure step types match Rundeck expectations:\n\n**Command steps:** Use `exec` field for direct commands\n```yaml\n- exec: echo \"Hello World\"\n  description: Simple command\n```\n\n**Script steps:** Use `script` field with optional `scriptInterpreter`\n```yaml\n- script: |\n    #!/bin/bash\n    echo \"Bash script\"\n  description: Bash script step\n```\n```yaml\n- script: |\n    Write-Host \"PowerShell script\"\n  scriptInterpreter: powershell.exe\n  description: PowerShell script step\n```\n\n**Plugin steps:** Use `type` and `nodeStep` fields with `configuration`\n```yaml\n- type: ansible-module\n  nodeStep: true\n  configuration:\n    module: command\n    args: uptime\n  description: Ansible command\n```\n\n**SQL steps:** Use sqlRunner plugin type\n```yaml\n- type: sqlRunner\n  nodeStep: false\n  configuration:\n    jdbcDriver: org.postgresql.Driver\n    jdbcUrl: jdbc:postgresql://localhost/mydb\n    user: dbuser\n    password: '@option.dbPassword@'\n    sql: SELECT * FROM status;\n  description: Database query\n```\n\n**Validation rules:**\n1. Scripts with shebangs: Ensure shebang is on first line\n2. PowerShell scripts: Must specify scriptInterpreter unless using .ps1 file\n3. Ansible steps: Must include module name and valid args\n4. SQL steps: Must include jdbcDriver, jdbcUrl, and sql fields\n5. Variable substitution: Always use @option.VAR@ format (NOT ${VAR} or $VAR)"
  },
  "modify_job": {
    "description": "Modify an existing Rundeck job by deleting and recreating with same UUID",
    "prompt": "ALWAYS show amber square emoji and Impact assessment: MEDIUM RISK - JOB MODIFICATION at the beginning. Modify an existing job by following the required pattern: delete job, modify, and replace with the same UUID. The job will be temporarily unavailable during this process. VARIABLE SUBSTITUTION RULES: ALWAYS use @option.VARIABLENAME@ format for any script type (single @, NOT double @@). Preserves the original UUID and allows modification of any job property including name, command, description, options, schedule, and configuration. Uses intelligent automation features with variable extraction and markdown documentation. Requires explicit confirmation with confirmed=True parameter for safety. Show modification summary before execution.\n\n## MODIFYING WORKFLOW STEPS\n\nWhen modifying job steps, maintain proper structure for each step type:\n\n**Changing script interpreter:**\n```yaml\n# Before (bash)\n- script: |\n    #!/bin/bash\n    echo \"Hello\"\n\n# After (PowerShell)\n- script: |\n    Write-Host \"Hello\"\n  scriptInterpreter: powershell.exe\n```\n\n**Converting command to script:**\n```yaml\n# Before (simple command)\n- exec: ls -la\n\n# After (script with logic)\n- script: |\n    #!/bin/bash\n    if [ -d /var/log ]; then\n      ls -la /var/log\n    fi\n  description: List logs with validation\n```\n\n**Adding SQL step to existing workflow:**\n```yaml\n- type: sqlRunner\n  nodeStep: false\n  configuration:\n    jdbcDriver: org.postgresql.Driver\n    jdbcUrl: jdbc:postgresql://@option.dbHost@/@option.dbName@\n    user: '@option.dbUser@'\n    password: '@option.dbPassword@'\n    sql: |\n      INSERT INTO job_runs (job_name, run_time) VALUES ('my-job', NOW());\n  description: Log job execution\n```\n\n**Adding Ansible step:**\n```yaml\n- type: ansible-module\n  nodeStep: true\n  configuration:\n    module: file\n    args: 'path=/tmp/job-marker state=touch'\n  description: Create marker file\n```\n\n**Adding error handlers:**\n```yaml\n- script: |\n    #!/bin/bash\n    exit 1\n  description: Step that might fail\n  errorhandler:\n    script: |\n      #!/bin/bash\n      echo \"Handling error, cleaning up\"\n      rm -f /tmp/lockfile\n    description: Cleanup on failure\n```\n\n**Step modification best practices:**\n1. Always preserve existing step order unless explicitly changing workflow\n2. When adding new steps, consider placement (pre-checks, main work, post-actions)\n3. Maintain consistent variable naming across steps\n4. Add error handlers for critical steps\n5. Update job description to reflect workflow changes"
  },
  "get_execution_status": {
    "description": "Get the status and details of a job execution",
    "prompt": "Check the current status of a running or completed job execution. Shows execution state, timing, user, and node results. Use the execution ID returned from run_job."
  },
  "get_execution_output": {
    "description": "Get the output logs of a job execution",
    "prompt": "Retrieve the complete output logs from a job execution. Useful for debugging failed jobs or reviewing execution details."
  },
  "get_executions": {
    "description": "Get executions for a project with filtering options and pagination",
    "prompt": "Query execution history with human-readable formatting showing status icons (✅ succeeded, ❌ failed, 🔄 running). Supports pagination and filtering. Returns formatted summaries by default - perfect for browsing recent activity."
  },
  "get_all_executions": {
    "description": "Get all executions with automatic pagination (up to specified limit)",
    "prompt": "Retrieve large datasets with automatic pagination and status summaries. Shows overview statistics and recent executions in human-readable format. Ideal for comprehensive project analysis and reporting."
  },
  "get_execution_metrics": {
    "description": "Get comprehensive execution metrics and analytics for a project",
    "prompt": "Generate detailed analytics including success rates, duration statistics, job frequency analysis, and performance trends over a specified time period. Perfect for project health assessment."
  },
  "get_system_info": {
    "description": "Get Rundeck system information and health metrics",
    "prompt": "Retrieve system-level information about your Rundeck instance including version, health status, and configuration details."
  },
  "get_project_stats": {
    "description": "Get comprehensive statistics for a project including jobs and execution metrics",
    "prompt": "Generate a complete project overview including job counts (total, enabled, scheduled), recent execution metrics, and project configuration. Ideal for project health dashboards."
  },
  "calculate_job_roi": {
    "description": "Calculate ROI metrics for a specific job including cost analysis and value estimation",
    "prompt": "Perform comprehensive ROI analysis for automation jobs including execution costs, estimated manual work savings, and ROI percentage. Helps justify automation investments and identify optimization opportunities."
  },
  "get_bulk_execution_status": {
    "description": "Get status for multiple executions efficiently",
    "prompt": "Check status for multiple executions in a single operation. More efficient than individual status checks when monitoring multiple jobs."
  },
  "run_job_with_monitoring": {
    "description": "Execute a job with optional monitoring until completion",
    "prompt": "Estimate the impact of the job from a risk or cost perspective, and if a risk, ask for confirmation, explaining why, ALWAYS show red amber or green square emoji and Impact assesment: at the beginning.Execute a job and wait for completion showing the output in a code box.if the job definition has options display them once as a numbered list in a table with a arrow emoji depicting if required, or optional, with the default value in brackets, Make sure required options are requested from the user before execution.Stop the job to allow the user to enter values in the form number/value.if only predefined values are available, only let these be selected before running.Do NOT run without confirmation of options or defaults. always show output. Includes timeout protection and returns final execution status. Ideal for automated workflows requiring completion confirmation."
  },
  "get_nodes": {
    "description": "Get nodes for a Rundeck project with optional filtering",
    "prompt": "Retrieve and display all nodes (servers/hosts) in a Rundeck project with human-readable formatting. Shows node names, hostnames, operating systems, and tags. Supports filtering by node attributes or tags to find specific nodes. Perfect for infrastructure discovery and node inventory management."
  },
  "get_node_details": {
    "description": "Get detailed information about a specific node",
    "prompt": "Get comprehensive details about a specific node including hostname, operating system details, architecture, version, description, tags, and all custom attributes. Essential for understanding node configuration and capabilities before job execution."
  },
  "get_node_summary": {
    "description": "Get a summary of nodes in the project including counts and statistics",
    "prompt": "Generate a comprehensive overview of all nodes in a project including total counts, operating system distribution, status breakdown, most common tags, and infrastructure statistics. Ideal for infrastructure health assessment and capacity planning."
  },
  "suggest_node_filters": {
    "description": "Suggest node filter patterns for targeting specific nodes",
    "prompt": "ESSENTIAL for Windows node troubleshooting. When adhoc commands fail with 'No nodes matched', use this tool to find the correct filter syntax. Provide a search term (like 'Server-1' or 'windows') to get specific suggestions for that node. Returns exact filter patterns, regex options, and troubleshooting guidance for targeting Windows and other remote nodes."
  },
  "abort_execution": {
    "description": "Abort a running execution",
    "prompt": "ALWAYS show red square emoji and Impact assessment: HIGH RISK at the beginning. Emergency stop for running job executions. Use when jobs are consuming excessive resources, running longer than expected, or need immediate termination. Requires confirmation before proceeding. Shows abort status and provides execution details."
  },
  "retry_execution": {
    "description": "Retry a failed execution",
    "prompt": "Re-execute a failed job with optional parameter overrides. Useful for transient failures, network issues, or when conditions have been corrected. Can modify job options and node filters for the retry. Returns new execution ID for monitoring. Show green square emoji and Impact assessment: LOW RISK."
  },
  "delete_execution": {
    "description": "Delete an execution from the system",
    "prompt": "ALWAYS show amber square emoji and Impact assessment: MEDIUM RISK - DATA LOSS at the beginning. Permanently remove execution records from Rundeck. Use for cleanup, compliance, or removing sensitive execution data. Cannot be undone. Requires confirmation. Ideal for housekeeping and storage management."
  },
  "job_control": {
    "description": "Control job execution and scheduling state",
    "prompt": "🟡 MEDIUM RISK: Consolidated job control operations. Specify operation parameter: 'enable' (activate job execution and scheduling - GREEN SQUARE, LOW RISK), 'disable' (completely disable job - AMBER SQUARE, MEDIUM RISK - SERVICE IMPACT), 'enable_schedule' (enable only scheduling - GREEN SQUARE, LOW RISK), 'disable_schedule' (disable only scheduling, manual execution still works - AMBER SQUARE, LOW-MEDIUM RISK - AUTOMATION IMPACT). Use for maintenance windows, bringing jobs online/offline, or controlling automation vs manual execution. Always show appropriate risk level emoji and impact assessment based on operation type."
  },
  "delete_job": {
    "description": "🔴 PERMANENTLY DELETE a job (DESTRUCTIVE - requires confirmation)",
    "prompt": "🚨 CRITICAL SAFETY PROTOCOL 🚨 ALWAYS show red square emoji and Impact assessment: HIGH RISK - PERMANENT DATA LOSS at the beginning. This tool PERMANENTLY and IRREVERSIBLY deletes a job from Rundeck. The operation cannot be undone and will destroy all job configuration, execution history, and schedules. MANDATORY two-step process: 1) First call WITHOUT confirmed=True to show deletion preview and get explicit user consent, 2) Second call WITH confirmed=True to execute deletion. Always display detailed job information and require explicit user confirmation before proceeding. Use extreme caution - this is a destructive operation."
  },
  "get_execution_mode": {
    "description": "Get current system execution mode",
    "prompt": "Check the global execution mode of the Rundeck system. Shows whether the system is in ACTIVE mode (normal operations) or PASSIVE mode (executions disabled). Essential for understanding system state during maintenance or troubleshooting."
  },
  "set_execution_mode": {
    "description": "Set system execution mode (active or passive)",
    "prompt": "ALWAYS show red square emoji and Impact assessment: HIGH RISK - SYSTEM-WIDE IMPACT at the beginning. Change global system execution mode. ACTIVE enables all job executions, PASSIVE disables all job executions system-wide. Critical for maintenance windows and emergency situations. Requires explicit confirmation. Affects all projects and jobs."
  },
  "analyze_job": {
    "description": "Comprehensive job analysis including purpose, configuration, nodes, and risk assessment",
    "prompt": "Perform deep analysis of a Rundeck job including complete job definition download, purpose inference, node targeting analysis, workflow step breakdown, option requirements, schedule configuration, and comprehensive risk assessment. Shows impact level with colored emoji indicators. Essential for understanding job behavior before execution, security review, and operational planning. Provides both human-readable summary and complete raw JSON data."
  },
  "visualize_job": {
    "description": "Generate a visual flowchart representation of a Rundeck job",
    "prompt": "Create a modern, interactive flowchart visualization of a Rundeck job using Mermaid diagram syntax. Shows the complete execution flow including job configuration, node filters, options, workflow steps, and error handlers. The generated Mermaid code can be rendered in various tools like Mermaid Live Editor, GitHub markdown, VS Code, Confluence, and Jira. Includes color-coded nodes for different step types, emoji indicators for visual clarity, and a comprehensive legend. Perfect for documentation, training, troubleshooting, and understanding complex job workflows at a glance."
  },
  "run_adhoc_command": {
    "description": "Execute ad hoc commands directly on Rundeck nodes",
    "prompt": "ESSENTIAL for Windows node troubleshooting. Execute shell commands directly on nodes without creating permanent job definitions. ALWAYS show amber square emoji and Impact assessment: MEDIUM RISK - DIRECT SYSTEM ACCESS at the beginning. Specify the command to run, target nodes via filter pattern (REQUIRED - no defaults). Examples: 'name: Server-1-infra' for exact node name, 'name: localhost' for local execution, '.*Windows.*' for regex patterns, 'osFamily: windows' for OS filtering. If node filter doesn't match any nodes, STOP IMMEDIATELY and report the error with troubleshooting guidance - do not continue. Use get_nodes or suggest_node_filters tools first to identify correct node names and filter syntax. Returns execution ID and output details. Perfect for Windows diagnostics, quick maintenance tasks, one-off commands, and system troubleshooting. Requires explicit node_filter parameter and confirmation before execution due to direct system access."
  }
}